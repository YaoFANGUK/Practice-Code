# 1. tcp服务器端
# 2. 循环等待客户端连接，创建子线程处理客户端请求，
#   2.1. 接收到浏览器发送的http请求报文
#   2.2. 读取指定页面的数据，构建响应报文并返回
#   2.3. 关闭客户端的socket
# 3. 设置子线程为守护主线程




# 处理客户端请求的任务

    # 2. 接收到浏览器发送的http请求报文

    # 2.1. 判断浏览器关闭（客户端下线）




    # 2.2. 提取请求资源路径
    #   按照空格分割请求报文 (GET /index.html HTTP/1.1\r\n ....)
    #   [0]: GET
    #   [1]: /index.html
    #   [2]: ....
    #   split(分割字符， maxsplit=最大分割次数)


    # 2.3. 如果没有请求指定页面，那么设置默认首页



    # 3. 读取指定页面的数据，构建响应报文并返回

        #   3.1 读取指定页面的数据
        #       无论什么请求，我都返回一个指定页面 static + 请求资源路径
        #       "r":读出字符串数据  "rb":读出二进制数据 (支持读任意文件)



        #   3.2. 请求资源路径，找不到指定文件或者目录


        #   3.3. 请求资源路径，能够找到资源，并返回响应报文




# 1. tcp服务器端socket初始化函数


# 2. 启动服务器函数

    # 1.2. 循环等待客户端连接



        # 一旦有客户端请求创建子线程服务客户端

        # 防止主线程无法关闭

        # 启动线程对象，创建子线程并执行



if __name__ == '__main__':











